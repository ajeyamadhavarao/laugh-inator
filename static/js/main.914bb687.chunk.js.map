{"version":3,"sources":["joke.js","joke2.js","App.js","serviceWorker.js","index.js"],"names":["Joke1","useState","joke1","setJoke1","joke2","setJoke2","getJoke1","a","fetch","response","json","data","joke","getJoke2","setup","delivery","className","onClick","Joke2","joke3","setJoke3","joke4","setJoke4","getJoke3","getJoke4","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":";wMAmDeA,EAhDD,WAAO,IAAD,EAEUC,mBAAS,oEAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGUF,mBAAS,2GAHnB,mBAGTG,EAHS,KAGFC,EAHE,KAMVC,EAAQ,uCAAG,8BAAAC,EAAA,sEACUC,MAAM,6DADhB,cACPC,EADO,gBAIMA,EAASC,OAJf,OAIPC,EAJO,OAMbR,EAASQ,EAAKC,MAND,2CAAH,qDAQRC,EAAQ,uCAAG,8BAAAN,EAAA,sEACUC,MAAM,mDADhB,cACPC,EADO,gBAIMA,EAASC,OAJf,OAIPC,EAJO,OAMbN,EAAS,GAAD,OAAIM,EAAKG,OAAT,OAAiBH,EAAKI,WANjB,2CAAH,qDASd,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,aAAd,eACA,yBAAKA,UAAU,YACVd,GAGL,4BAAQc,UAAU,SAASC,QAASX,GAApC,kBAEJ,yBAAKU,UAAU,SACX,wBAAIA,UAAU,aAAd,iBACA,yBAAKA,UAAU,YACVZ,GAGL,4BAAQY,UAAU,SAASC,QAASJ,GAApC,oBCWDK,EAlDD,WAAO,IAAD,EAEUjB,mBAAS,kDAFnB,mBAETkB,EAFS,KAEFC,EAFE,OAGUnB,mBAAS,uEAHnB,mBAGToB,EAHS,KAGFC,EAHE,KAKVC,EAAQ,uCAAG,8BAAAhB,EAAA,sEACUC,MAAM,0CADhB,cACPC,EADO,gBAIMA,EAASC,OAJf,OAIPC,EAJO,OAMbS,EAAS,GAAD,OAAIT,EAAKG,OAAT,OAAiBH,EAAKI,WANjB,2CAAH,qDAQLS,EAAQ,uCAAG,8BAAAjB,EAAA,sEACOC,MAAM,yCADb,cACVC,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAMhBW,EAAS,GAAD,OAAIX,EAAKG,OAAT,OAAiBH,EAAKI,WANd,2CAAH,qDAUjB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,aAAd,QACA,yBAAKA,UAAU,YACVG,GAGL,4BAAQH,UAAU,SAASC,QAASM,GAApC,kBAGJ,yBAAKP,UAAU,SACX,wBAAIA,UAAU,aAAd,QACA,yBAAKA,UAAU,YACVK,GAIL,4BAAQL,UAAU,SAASC,QAASO,GAApC,oBCvBDC,MAZf,WAGE,OACE,yBAAKT,UAAU,OACb,uBAAGA,UAAU,UAAb,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.914bb687.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst Joke1 = () => {\r\n\r\n    const [joke1, setJoke1] = useState(\"Knock knock. Who's there? Recursion. Recursion who? Knock knock.\");\r\n    const [joke2, setJoke2] = useState(\"My wife is really mad at the fact that I have no sense of direction. So I packed up my stuff and right.\");\r\n\r\n\r\n    const getJoke1 = async () => {\r\n        const response = await fetch(\r\n            `https://sv443.net/jokeapi/v2/joke/Programming?type=single`\r\n        );\r\n        const data = await response.json();\r\n        // console.log(data.joke);\r\n        setJoke1(data.joke);\r\n    };\r\n    const getJoke2 = async () => {\r\n        const response = await fetch(\r\n            `https://sv443.net/jokeapi/v2/joke/Miscellaneous`\r\n        );\r\n        const data = await response.json();\r\n        // console.log(data.joke);\r\n        setJoke2(`${data.setup}${data.delivery}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Joke-container\">\r\n            <div className=\"Joke1\">\r\n                <h1 className=\"joke-head\">Programming</h1>\r\n                <div className=\"joke-box\">\r\n                    {joke1}\r\n\r\n                </div>\r\n                <button className=\"button\" onClick={getJoke1}>Feed me more!</button>\r\n            </div>\r\n            <div className=\"Joke2\">\r\n                <h1 className=\"joke-head\">Miscellaneous</h1>\r\n                <div className=\"joke-box\">\r\n                    {joke2}\r\n\r\n                </div>\r\n                <button className=\"button\" onClick={getJoke2}>Feed me more!</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Joke1;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst Joke2 = () => {\r\n\r\n    const [joke3, setJoke3] = useState(\"Dark humor is like food, not everyone gets it.\");\r\n    const [joke4, setJoke4] = useState(\"I'm reading a book about anti-gravity. It's impossible to put down!\");\r\n\r\n    const getJoke3 = async () => {\r\n        const response = await fetch(\r\n            `https://sv443.net/jokeapi/v2/joke/Dark`\r\n        );\r\n        const data = await response.json();\r\n        // console.log(data.joke);\r\n        setJoke3(`${data.setup}${data.delivery}`);\r\n\r\n    }; const getJoke4 = async () => {\r\n        const response = await fetch(\r\n            `https://sv443.net/jokeapi/v2/joke/Pun`\r\n        );\r\n        const data = await response.json();\r\n        // console.log(data.joke);\r\n        setJoke4(`${data.setup}${data.delivery}`);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"Joke-container\">\r\n            <div className=\"Joke1\">\r\n                <h1 className=\"joke-head\">Dark</h1>\r\n                <div className=\"joke-box\">\r\n                    {joke3}\r\n\r\n                </div>\r\n                <button className=\"button\" onClick={getJoke3}>Feed me more!</button>\r\n\r\n            </div>\r\n            <div className=\"Joke2\">\r\n                <h1 className=\"joke-head\">Puns</h1>\r\n                <div className=\"joke-box\">\r\n                    {joke4}\r\n\r\n\r\n                </div>\r\n                <button className=\"button\" onClick={getJoke4}>Feed me more!</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Joke2;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n//! import components\nimport Joke1 from \"./joke\"\nimport Joke2 from './joke2';\n\n\nfunction App() {\n  // ! JS from here\n\n  return (\n    <div className=\"App\">\n      <p className=\"header\" >Laugh-inator!</p>\n      <Joke1 />\n      <Joke2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}